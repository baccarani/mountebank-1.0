{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/imposter.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\n\nfunction ResponsesComponent_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const opt_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", opt_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(opt_r9);\n  }\n}\n\nfunction ResponsesComponent_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const infoCode_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", infoCode_r10);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(infoCode_r10);\n  }\n}\n\nfunction ResponsesComponent_option_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const successCode_r11 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", successCode_r11);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", successCode_r11, \" \");\n  }\n}\n\nfunction ResponsesComponent_option_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const redirectCode_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", redirectCode_r12);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", redirectCode_r12, \"\");\n  }\n}\n\nfunction ResponsesComponent_option_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const clientCode_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", clientCode_r13);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", clientCode_r13, \" \");\n  }\n}\n\nfunction ResponsesComponent_option_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const serverCode_r14 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", serverCode_r14);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", serverCode_r14, \" \");\n  }\n}\n\nfunction ResponsesComponent_option_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵpipe(1, \"json\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"json\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const header_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", i0.ɵɵpipeBind1(1, 2, header_r15));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 4, header_r15));\n  }\n}\n\nexport let ResponsesComponent = /*#__PURE__*/(() => {\n  class ResponsesComponent {\n    constructor(formBuilder, imposterService) {\n      this.formBuilder = formBuilder;\n      this.imposterService = imposterService;\n      this.index = 0;\n      this.responseIndex = 0;\n      this.response = {\n        statusCode: '',\n        headers: '',\n        body: ''\n      };\n      this.deleteUpdate = new EventEmitter();\n      this.deleteResponseUpdate = new EventEmitter();\n      this.statusCode = ['Informational responses (100 to 199)', 'Successful responses (200 to 299)', 'Redirection messages (300 to 399)', 'Client error responses (400 to 499)', 'Server error responses (500 to 599)'];\n      this.informationRes = ['100', '101', '102', '103'];\n      this.successRes = ['200', '201', '202', '203', '204', '205', '206', '207', '208', '226'];\n      this.redirectionRes = ['300', '301', '302', '303', '304', '305', '306', '307', '308'];\n      this.clientErrRes = ['400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '421', '422', '423', '424', '425', '426', '428', '429', '431', '451'];\n      this.serverErrRes = ['500', '501', '502', '503', '504', '505', '506', '507', '508', '510', '511'];\n      this.headers = [{\n        'Content-Type': 'application/json'\n      }];\n      this.responseForm = this.formBuilder.group({\n        statusCode: 0,\n        infoCode: [''],\n        successCode: [''],\n        redirectCode: [''],\n        clientCode: [''],\n        serverCode: [''],\n        headers: [''],\n        body: ['']\n      });\n    }\n\n    ngOnInit() {\n      this.responseForm.setValue({\n        statusCode: this.response.statusCode,\n        infoCode: '',\n        successCode: '',\n        redirectCode: '',\n        clientCode: '',\n        serverCode: '',\n        headers: this.response.headers,\n        body: this.response.body\n      });\n      this.responseForm.valueChanges.subscribe(() => {\n        this.updateResponses();\n      });\n    }\n\n    onSubmit() {}\n\n    onDelete() {\n      this.deleteResponseUpdate.emit(this.responseIndex);\n      const responseCount = this.imposterService.onGetResponses().length;\n\n      if (responseCount > 1) {\n        this.hideCloseButton = false;\n      } else {\n        this.hideCloseButton = true;\n      }\n    }\n\n    updateResponses() {\n      const statusCode = this.responseForm.get('statusCode').value;\n      const infoCode = Number(this.responseForm.get('infoCode').value);\n      const successCode = Number(this.responseForm.get('successCode').value);\n      const redirectCode = Number(this.responseForm.get('redirectCode').value);\n      const clientCode = Number(this.responseForm.get('clientCode').value);\n      const serverCode = Number(this.responseForm.get('serverCode').value);\n      const headers = this.responseForm.get('headers').value;\n      const body = this.responseForm.get('body').value;\n\n      if (infoCode) {\n        this.response.statusCode = infoCode;\n      }\n\n      if (successCode) {\n        this.response.statusCode = successCode;\n      }\n\n      if (redirectCode) {\n        this.response.statusCode = redirectCode;\n      }\n\n      if (clientCode) {\n        this.response.statusCode = clientCode;\n      }\n\n      if (serverCode) {\n        this.response.statusCode = serverCode;\n      }\n\n      this.response.headers = headers;\n      this.response.body = body;\n      const index = this.imposterService.onGetResponses().findIndex(p => p.statusCode === statusCode && p.headers === headers && p.body === body);\n\n      if (index > -1) {\n        // Update existing predicate\n        this.imposterService.onGetResponses()[index] = this.response;\n      } else {\n        // Add new predicate\n        this.imposterService.onGetResponses().push(this.response);\n      }\n    }\n\n  }\n\n  ResponsesComponent.ɵfac = function ResponsesComponent_Factory(t) {\n    return new (t || ResponsesComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ImposterService));\n  };\n\n  ResponsesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResponsesComponent,\n    selectors: [[\"app-responses\"]],\n    inputs: {\n      index: \"index\",\n      responseIndex: \"responseIndex\",\n      response: \"response\",\n      hideCloseButton: \"hideCloseButton\"\n    },\n    outputs: {\n      deleteUpdate: \"deleteUpdate\",\n      deleteResponseUpdate: \"deleteResponseUpdate\"\n    },\n    decls: 52,\n    vars: 13,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [2, \"border\", \"1px solid #ccc\", \"border-radius\", \"10px\", \"background-color\", \"#dcdcdc\"], [2, \"display\", \"flex\", \"justify-content\", \"flex-start\", \"align-items\", \"center\", \"padding-right\", \"5px\", \"padding-top\", \"5px\"], [2, \"margin-right\", \"auto\", \"padding-left\", \"15px\", \"padding-top\", \"5px\", \"font-weight\", \"bold\"], [\"mat-icon-button\", \"\", \"color\", \"basic\", 3, \"click\"], [2, \"padding-bottom\", \"30px\", \"padding-left\", \"30px\", \"padding-right\", \"30px\"], [\"name\", \"statusCode\", \"formControlName\", \"statusCode\", 1, \"form-control\"], [\"code\", \"\"], [\"value\", \"select option\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"hidden\"], [\"name\", \"infoRes\", \"formControlName\", \"infoCode\", 1, \"form-control\"], [\"name\", \"succRes\", \"formControlName\", \"successCode\", 1, \"form-control\"], [\"name\", \"redRes\", \"formControlName\", \"redirectCode\", 1, \"form-control\"], [\"name\", \"cliRes\", \"formControlName\", \"clientCode\", 1, \"form-control\"], [\"name\", \"serverRes\", \"formControlName\", \"serverCode\", 1, \"form-control\"], [\"name\", \"headers\", \"formControlName\", \"headers\", 1, \"form-control\"], [\"path\", \"\"], [\"name\", \"body\", \"required\", \"\", \"formControlName\", \"body\", 1, \"form-control\", 2, \"resize\", \"none\"], [3, \"value\"]],\n    template: function ResponsesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function ResponsesComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"h3\", 3);\n        i0.ɵɵtext(4, \"New Response\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\")(6, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function ResponsesComponent_Template_button_click_6_listener() {\n          return ctx.onDelete();\n        });\n        i0.ɵɵelementStart(7, \"mat-icon\");\n        i0.ɵɵtext(8, \"close\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(9, \"div\", 5)(10, \"div\")(11, \"label\");\n        i0.ɵɵtext(12, \"Status Code:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"select\", 6, 7)(15, \"option\", 8);\n        i0.ɵɵtext(16, \"Please select an option\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, ResponsesComponent_option_17_Template, 2, 2, \"option\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 10);\n        i0.ɵɵelement(19, \"br\");\n        i0.ɵɵelementStart(20, \"select\", 11);\n        i0.ɵɵtemplate(21, ResponsesComponent_option_21_Template, 2, 2, \"option\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"div\", 10);\n        i0.ɵɵelement(23, \"br\");\n        i0.ɵɵelementStart(24, \"select\", 12);\n        i0.ɵɵtemplate(25, ResponsesComponent_option_25_Template, 2, 2, \"option\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\", 10);\n        i0.ɵɵelement(27, \"br\");\n        i0.ɵɵelementStart(28, \"select\", 13);\n        i0.ɵɵtemplate(29, ResponsesComponent_option_29_Template, 2, 2, \"option\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"div\", 10);\n        i0.ɵɵelement(31, \"br\");\n        i0.ɵɵelementStart(32, \"select\", 14);\n        i0.ɵɵtemplate(33, ResponsesComponent_option_33_Template, 2, 2, \"option\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(34, \"div\", 10);\n        i0.ɵɵelement(35, \"br\");\n        i0.ɵɵelementStart(36, \"select\", 15);\n        i0.ɵɵtemplate(37, ResponsesComponent_option_37_Template, 2, 2, \"option\", 9);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(38, \"br\");\n        i0.ɵɵelementStart(39, \"div\")(40, \"label\");\n        i0.ɵɵtext(41, \"Headers:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(42, \"br\");\n        i0.ɵɵelementStart(43, \"select\", 16, 17);\n        i0.ɵɵtemplate(45, ResponsesComponent_option_45_Template, 4, 6, \"option\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(46, \"br\");\n        i0.ɵɵelementStart(47, \"div\")(48, \"label\");\n        i0.ɵɵtext(49, \"Body:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(50, \"textarea\", 18);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(51, \"br\");\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(14);\n\n        i0.ɵɵproperty(\"formGroup\", ctx.responseForm);\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", ctx.statusCode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", _r0.value == \"Informational responses (100 to 199)\" ? false : true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.informationRes);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", _r0.value == \"Successful responses (200 to 299)\" ? false : true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.successRes);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", _r0.value == \"Redirection messages (300 to 399)\" ? false : true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.redirectionRes);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", _r0.value == \"Client error responses (400 to 499)\" ? false : true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.clientErrRes);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", _r0.value == \"Server error responses (500 to 599)\" ? false : true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.serverErrRes);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.headers);\n      }\n    },\n    dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i4.MatButton, i5.MatIcon, i1.FormGroupDirective, i1.FormControlName, i3.JsonPipe]\n  });\n  return ResponsesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}