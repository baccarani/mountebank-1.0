{"ast":null,"code":"import _asyncToGenerator from \"/Users/BPHA/Documents/GitHub/mountebank-1.0/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ImposterService {\n  constructor(http) {\n    this.http = http;\n    this.imposterArray = null;\n  }\n\n  onGetImposter() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('test');\n      var imposterArray$;\n      var imposterArrayFull = [];\n      _this.imposterArray = yield _this.http.get(`http://localhost:5000/imposters`).pipe(map(responseData => {\n        _this.imposterArray = responseData;\n        _this.imposterArray = _this.imposterArray.imposters;\n        return _this.imposterArray;\n      })).subscribe(data => {\n        imposterArray$ = data;\n        console.log(imposterArray$);\n      });\n      console.log(imposterArray$);\n\n      for (let i = 0; i > _this.imposterArray.length; i++) {\n        let x = null;\n\n        _this.http.get(`http://localhost:5000/imposters/${_this.imposterArray[i].port}`).subscribe(data => {\n          x = data;\n          imposterArrayFull.push(x);\n        });\n      }\n\n      console.log(imposterArrayFull);\n      return imposterArrayFull;\n    })();\n  }\n\n  onViewImposter(data) {\n    return this.http.get(`http://localhost:5000/imposters/${data}`);\n  }\n\n  onDeleteImposter(port, index) {\n    this.http.delete(`http://localhost:5000/imposters/${port}`).subscribe(data => {\n      this.imposterArray.splice(index, 1);\n    });\n  } // onAddImposter(data) {\n  //     this.http\n  //         .post(`http://localhost:5000/imposters`, data)\n  //         .subscribe(responseData => {\n  //             this.imposterArray.push(responseData);\n  //             this.imposterArray.sort((a, b) => {\n  //                 return a.port - b.port;\n  //             });\n  //         });\n  // }\n\n\n  createImposter(formValues) {\n    const headers = JSON.parse(formValues.headers);\n    const body = JSON.parse(formValues.body);\n    const data = {\n      port: formValues.port,\n      protocol: formValues.protocol,\n      name: formValues.name,\n      stubs: [{\n        responses: [{\n          is: {\n            statusCode: formValues.statusCode,\n            headers: headers,\n            body: body\n          }\n        }],\n        predicates: [{\n          and: [{\n            equals: {\n              method: formValues.method,\n              path: formValues.path\n            }\n          }]\n        }]\n      }]\n    };\n    this.http.post(`http://localhost:5000/imposters`, data).subscribe(responseData => {\n      this.imposterArray.push(responseData);\n      this.imposterArray.sort((a, b) => {\n        return a.port - b.port;\n      });\n    });\n  }\n\n}\n\nImposterService.ɵfac = function ImposterService_Factory(t) {\n  return new (t || ImposterService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nImposterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImposterService,\n  factory: ImposterService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["map","ImposterService","constructor","http","onGetImposter","console","log","imposterArray$","imposterArrayFull","imposterArray","get","pipe","responseData","imposters","subscribe","data","i","length","x","port","push","onViewImposter","onDeleteImposter","index","delete","splice","createImposter","formValues","headers","JSON","parse","body","protocol","name","stubs","responses","is","statusCode","predicates","and","equals","method","path","post","sort","a","b","i0","factory"],"sourceRoot":"","sources":["/Users/BPHA/Documents/GitHub/mountebank-1.0/frontend/src/app/services/imposter.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from \"rxjs/operators\";\n\n@Injectable()\nexport class ImposterService {\n    private imposterArray: any = null;\n\n\n    constructor(private http: HttpClient) { }\n\n\n\n    async onGetImposter() {\n        console.log('test')\n        var imposterArray$\n        var imposterArrayFull = []\n\n        this.imposterArray = await this.http\n            .get(`http://localhost:5000/imposters`)\n            .pipe(map((responseData) => {\n                this.imposterArray = responseData;\n                this.imposterArray = this.imposterArray.imposters;\n                return this.imposterArray;\n            }))\n            .subscribe(data=>{imposterArray$ = data; console.log(imposterArray$)});\n\n            console.log(imposterArray$)\n\n\n        for (let i = 0; i > this.imposterArray.length; i++) {\n            let x = null;\n            this.http.get(`http://localhost:5000/imposters/${this.imposterArray[i].port}`).subscribe(data => {\n                x = data\n                imposterArrayFull.push(x);\n            });\n        }\n\n        console.log(imposterArrayFull)\n\n\n        return imposterArrayFull\n    }\n\n    onViewImposter(data) {\n        return this.http\n            .get(`http://localhost:5000/imposters/${data}`)\n    }\n\n\n    onDeleteImposter(port, index) {\n        this.http\n            .delete(`http://localhost:5000/imposters/${port}`)\n            .subscribe(data => {\n                this.imposterArray.splice(index, 1);\n            })\n    }\n\n    0\n    // onAddImposter(data) {\n    //     this.http\n    //         .post(`http://localhost:5000/imposters`, data)\n    //         .subscribe(responseData => {\n    //             this.imposterArray.push(responseData);\n    //             this.imposterArray.sort((a, b) => {\n    //                 return a.port - b.port;\n    //             });\n    //         });\n    // }\n\n\n    createImposter(formValues) {\n        const headers = JSON.parse(formValues.headers);\n        const body = JSON.parse(formValues.body);\n        const data = {\n            port: formValues.port,\n            protocol: formValues.protocol,\n            name: formValues.name,\n            stubs: [\n                {\n                    responses: [{\n                        is: {\n                            statusCode: formValues.statusCode,\n                            headers: headers,\n                            body: body\n                        }\n                    }],\n                    predicates: [{\n                        and: [{\n                            equals: {\n                                method: formValues.method,\n                                path: formValues.path\n                            }\n                        }]\n                    }]\n                }]\n        };\n\n        this.http\n            .post(`http://localhost:5000/imposters`, data)\n            .subscribe(responseData => {\n                this.imposterArray.push(responseData);\n                this.imposterArray.sort((a, b) => {\n                    return a.port - b.port;\n                });\n            });\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}