{"ast":null,"code":"import { ElementRef, EventEmitter } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/imposter.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nconst _c0 = [\"options\"];\n\nfunction PredicatesComponent_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const o_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", o_r6.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(o_r6.name);\n  }\n}\n\nfunction PredicatesComponent_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const opt_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", opt_r7.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(opt_r7.name);\n  }\n}\n\nfunction PredicatesComponent_option_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const path_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", path_r8);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(path_r8);\n  }\n}\n\nexport let PredicatesComponent = /*#__PURE__*/(() => {\n  class PredicatesComponent {\n    constructor(imposterService, formBuilder) {\n      this.imposterService = imposterService;\n      this.formBuilder = formBuilder;\n      this.index = 0;\n      this.predicate = {\n        operator: '',\n        method: '',\n        path: '',\n        newpath: '',\n        data: '',\n        newOperator: '',\n        query: ''\n      };\n      this.showEdit = false;\n      this.beneficiaryUpdate = new EventEmitter();\n      this.editUpdate = new EventEmitter();\n      this.deleteUpdate = new EventEmitter();\n      this.genericPath = ['/customer', '/user', 'other'];\n      this.operator = [{\n        name: 'equals'\n      }, {\n        name: 'deepEquals'\n      }, {\n        name: 'contains'\n      }, {\n        name: 'startsWith'\n      }, {\n        name: 'endsWith'\n      }, {\n        name: 'matches'\n      }, {\n        name: 'exists'\n      }, {\n        name: 'not'\n      }, {\n        name: 'or'\n      }, {\n        name: 'and'\n      }, {\n        name: 'inject'\n      }];\n      this.newOperator = [{\n        name: 'equals'\n      }, {\n        name: 'deepEquals'\n      }, {\n        name: 'contains'\n      }, {\n        name: 'startsWith'\n      }, {\n        name: 'endsWith'\n      }, {\n        name: 'matches'\n      }, {\n        name: 'exists'\n      }, {\n        name: 'inject'\n      }];\n      this.predicateForm = this.formBuilder.group({\n        operator: [''],\n        method: [''],\n        path: [''],\n        newpath: [''],\n        data: [''],\n        newOperator: [''],\n        query: ['']\n      });\n      this.subPredicates = [];\n      this.showPredicates = false;\n      this.showSubPredicates = false;\n    }\n\n    ngOnInit() {\n      this.predicateForm.setValue({\n        operator: this.predicate.operator,\n        method: this.predicate.method,\n        path: this.predicate.path,\n        newpath: this.predicate.newpath,\n        query: this.predicate.query,\n        data: this.predicate.data,\n        newOperator: this.predicate.newOperator\n      });\n      this.predicateForm.valueChanges.subscribe(() => {\n        this.updatePredicates();\n      });\n    }\n\n    onSubmit() {}\n\n    onDelete() {\n      this.deleteUpdate.emit(this.index);\n    }\n\n    deleteSubPredicateUpdate(index) {\n      let tempPredicates = [];\n\n      for (let i = 0; i < this.subPredicates.length; i++) {\n        if (i !== index) {\n          tempPredicates.push(this.subPredicates[i]);\n        }\n      }\n\n      this.subPredicates = tempPredicates;\n      this.imposterService.onDeleteSubPredicate(index);\n      this.subPredicates = this.imposterService.onGetPredicates();\n    }\n\n    updatePredicates() {\n      const operator = this.predicateForm.get('operator').value;\n      const method = this.predicateForm.get('method').value;\n      const path = this.predicateForm.get('path').value;\n      const newpath = this.predicateForm.get('newpath').value;\n      const data = this.predicateForm.get('data').value;\n      const newOperator = this.predicateForm.get('newOperator').value;\n      const query = this.predicateForm.get('query').value;\n      this.predicate.operator = operator;\n      this.predicate.method = method;\n      this.predicate.path = path;\n      this.predicate.newpath = newpath;\n      this.predicate.data = data;\n      this.predicate.newOperator = newOperator;\n      this.predicate.query = query;\n      const index = this.imposterService.onGetPredicates().findIndex(p => p.method === method && p.query === query && p.path === path && p.newpath === newpath && p.data === data && p.newOperator === newOperator);\n\n      if (index > -1) {\n        // Update existing predicate\n        this.imposterService.onGetPredicates()[index] = this.predicate;\n      } else {\n        // Add new predicate\n        this.imposterService.onGetPredicates().push(this.predicate);\n      }\n    }\n\n    selectHideData() {\n      if (this.options.nativeElement.value == 'equals' || this.options.nativeElement.value == 'deepEquals' || this.options.nativeElement.value == 'and' || this.options.nativeElement.value == 'equals') {\n        this.predicateForm.controls.data.disable();\n      } else {\n        this.predicateForm.controls.data.enable();\n      }\n    }\n\n  }\n\n  PredicatesComponent.ɵfac = function PredicatesComponent_Factory(t) {\n    return new (t || PredicatesComponent)(i0.ɵɵdirectiveInject(i1.ImposterService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n\n  PredicatesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PredicatesComponent,\n    selectors: [[\"app-predicates\"]],\n    viewQuery: function PredicatesComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t.first);\n      }\n    },\n    inputs: {\n      index: \"index\",\n      predicate: \"predicate\",\n      showEdit: \"showEdit\"\n    },\n    outputs: {\n      beneficiaryUpdate: \"beneficiaryUpdate\",\n      editUpdate: \"editUpdate\",\n      deleteUpdate: \"deleteUpdate\"\n    },\n    decls: 57,\n    vars: 6,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [2, \"border\", \"1px solid #ccc\", \"border-radius\", \"10px\", \"background-color\", \"#dcdcdc\"], [2, \"display\", \"flex\", \"justify-content\", \"flex-start\", \"align-items\", \"center\", \"padding-right\", \"5px\", \"padding-top\", \"5px\"], [2, \"margin-right\", \"auto\", \"padding-left\", \"15px\", \"padding-top\", \"5px\", \"font-weight\", \"bold\"], [\"mat-icon-button\", \"\", \"color\", \"basic\", 3, \"click\"], [2, \"padding-bottom\", \"30px\", \"padding-left\", \"30px\", \"padding-right\", \"30px\"], [\"name\", \"operator\", \"required\", \"\", \"formControlName\", \"operator\", 1, \"form-control\"], [\"options\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"hidden\"], [\"name\", \"newOperator\", \"required\", \"\", \"formControlName\", \"newOperator\", 1, \"form-control\"], [\"secondOperator\", \"\"], [\"type\", \"text\", \"formControlName\", \"data\", 1, \"form-control\"], [\"name\", \"method\", \"required\", \"\", \"formControlName\", \"method\", 1, \"form-control\"], [\"value\", \"GET\"], [\"value\", \"POST\"], [\"value\", \"PUT\"], [\"value\", \"DELETE\"], [\"name\", \"path\", \"formControlName\", \"path\", 1, \"form-control\"], [\"path\", \"\"], [\"type\", \"text\", \"name\", \"newpath\", \"required\", \"\", \"formControlName\", \"newpath\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"query\", \"required\", \"\", \"formControlName\", \"query\", 1, \"form-control\"], [3, \"value\"]],\n    template: function PredicatesComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function PredicatesComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"h3\", 3);\n        i0.ɵɵtext(4, \"New Predicate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function PredicatesComponent_Template_button_click_5_listener() {\n          return ctx.onDelete();\n        });\n        i0.ɵɵelementStart(6, \"mat-icon\");\n        i0.ɵɵtext(7, \"close\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"div\", 5)(9, \"div\")(10, \"label\");\n        i0.ɵɵtext(11, \"Operator:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"select\", 6, 7);\n        i0.ɵɵtemplate(14, PredicatesComponent_option_14_Template, 2, 2, \"option\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 9);\n        i0.ɵɵelement(16, \"br\");\n        i0.ɵɵelementStart(17, \"label\");\n        i0.ɵɵtext(18, \"Select Operator to compare: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"select\", 10, 11);\n        i0.ɵɵtemplate(21, PredicatesComponent_option_21_Template, 2, 2, \"option\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(22, \"br\");\n        i0.ɵɵelementStart(23, \"div\")(24, \"label\");\n        i0.ɵɵtext(25, \"Data:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"input\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"br\");\n        i0.ɵɵelementStart(28, \"div\")(29, \"label\");\n        i0.ɵɵtext(30, \"Method:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"select\", 13)(32, \"option\", 14);\n        i0.ɵɵtext(33, \"GET\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"option\", 15);\n        i0.ɵɵtext(35, \"POST\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"option\", 16);\n        i0.ɵɵtext(37, \"PUT\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"option\", 17);\n        i0.ɵɵtext(39, \"DELETE\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(40, \"br\");\n        i0.ɵɵelementStart(41, \"div\")(42, \"label\");\n        i0.ɵɵtext(43, \"Path:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(44, \"br\");\n        i0.ɵɵelementStart(45, \"select\", 18, 19);\n        i0.ɵɵtemplate(47, PredicatesComponent_option_47_Template, 2, 2, \"option\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"div\", 9);\n        i0.ɵɵelement(49, \"br\")(50, \"input\", 20);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(51, \"br\");\n        i0.ɵɵelementStart(52, \"div\")(53, \"label\");\n        i0.ɵɵtext(54, \"Query:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(55, \"input\", 21);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(56, \"br\");\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(13);\n\n        const _r4 = i0.ɵɵreference(46);\n\n        i0.ɵɵproperty(\"formGroup\", ctx.predicateForm);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", ctx.operator);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", _r0.value == \"or\" || _r0.value == \"and\" ? false : true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.newOperator);\n        i0.ɵɵadvance(26);\n        i0.ɵɵproperty(\"ngForOf\", ctx.genericPath);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", _r4.value == \"other\" ? false : true);\n      }\n    },\n    dependencies: [i3.NgForOf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i4.MatButton, i5.MatIcon, i2.FormGroupDirective, i2.FormControlName]\n  });\n  return PredicatesComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}